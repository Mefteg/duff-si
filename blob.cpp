// Blob
// Changelog 05.01.24

// Include
#include "blob.h"

inline void swap(Vector* & a,Vector* & b)
{
Vector *t=a;
a=b;
b=t;
}

inline void swap(double* & a,double* & b)
{
double *t=a;
a=b;
b=t;
}

inline void swap(int* & a,int* & b)
{
int *t=a;
a=b;
b=t;
}

/*!
\brief Creates a blob with given root node and threshold. Default
threshold is set to 0.5 and the scene graph is set empty.
\param node Root node.
\param T Threshold value.
*/
Blob::Blob(BlobNode* node,const double& T)
{
  element=node;
  threshold=T;
}

/*!
\brief Destroys a blob, recursively destroying the scene graph structure.
*/
Blob::~Blob()
{
  if (element!=NULL)
    delete element;
}

double epsilon=1e-6;
/*!
\brief Compute the gradient of the implicit function using a numerical
approximation of the derivatives in each direction. The standard
epsilon value used is 10<SUP>-6</SUP>.
*/
Vector Blob::Gradient(const Vector& p) const
{
  double x=Intensity(Vector(p[0]+epsilon,p[1],p[2]))-Intensity(Vector(p[0]-epsilon,p[1],p[2]));
  double y=Intensity(Vector(p[0],p[1]+epsilon,p[2]))-Intensity(Vector(p[0],p[1]-epsilon,p[2]));
  double z=Intensity(Vector(p[0],p[1],p[2]+epsilon))-Intensity(Vector(p[0],p[1],p[2]-epsilon));
  return Vector(x,y,z)/(2.0*epsilon);
}

Vector Blob::Dichotomy(Vector a,Vector b,double va,double vb,double length,const double& epsilon) const
{
  int ia=va>0?1:-1;

  // Get an accurate first guess
  Vector c=(vb*a-va*b)/(vb-va);
  while (length>epsilon)
  {
    double vc=Intensity(c);
    int ic=vc>0?1:-1;
    if (ia+ic==0)
    {
      b=c;
    }
    else
    {
      ia=ic;
      a=c;     
    }
    length*=0.5;
    c=0.5*(a+b);
  }
  return c;
}

/*! 
\brief Compute the field function value at a given point in space.
*/
double Blob::Intensity(const Vector& p) const
{
  return element->Intensity(p)-threshold;
}

//COLLISION PROCESS
void Blob::SetColliders(std::vector<Blob *> * b){
	colliders = new std::vector<Blob*>;
	//faire une boucle et ajouter tous les pointers vers blob sauf this
	std::vector<Blob*>::iterator it = b->begin();
	while(it!=b->end()){
		if((*it)!=this)
			colliders->push_back((*it));
		it++;
	}
	element->SetColliders(colliders);
}

void Blob::AddChild(BlobNode * n){
	bool inserted = false;
	//pointeur sur le noeud courant
	BlobNode * current = element;
	//si la racine est une feuille
	if(current->isLeaf()){
		//créer un nouveau bloblend
		BlobBlend * b = new BlobBlend(current,n);
		//allouer la nouvelle racine
		element =b;
		inserted = true;
	}
	
	while(!inserted){
		//garder un pointeur sur le père
		BlobNode * temp = current;
		//choisir un fils
		int ind = ( current->elements[0]->GetLength() <= current->elements[1]->GetLength() )?0:1;
		current = current->elements[ind];
		//si le noeud est une feuille
		if(current->isLeaf()){
			//créer un nouveau noeud père
			BlobBlend * b = new BlobBlend(current,n);
			temp->elements[ind] =b;
			inserted = true;
		}
	}
}


/*! 
\brief Compute the polygonization of the Blob.
\param box Box defining the domain.
\param n Grid subdivision parameter.
\param vertex Array of vertices
\param triangles Array of integers defining the triangles.
\param nv Number of vertices
\param nt Number of triangles.
\param epsilon Precision.
*/
void Blob::Polygonize(Box box,int n,Vector* vertex,int* triangles,int& nv,int& nt,const double& epsilon)
{
  nv=0;
  nt=0;

  double *a=new double[n*n];
  double *b=new double[n*n];  
  Vector *u=new Vector[n*n];
  Vector *v=new Vector[n*n];
  // Edges
  int *eax=new int[n*n];
  int *eay=new int[n*n];
  int *ebx=new int[n*n];
  int *eby=new int[n*n];
  int *ez=new int[n*n];

  Vector d=2.0*box.Diagonal()/(n-1);

  int i,j,k;

  // Compute potential field inside lower Oxy plane
  for (i=0;i<n;i++)
  {
    for (j=0;j<n;j++)
    {
      u[i*n+j]=box[0]+Vector(i*d[0],j*d[1],0.0);
      a[i*n+j]=Intensity(u[i*n+j]);
    }
  }

  // Compute straddling edges inside lower Oxy plane
  for (i=0;i<n-1;i++)
  {
    for (j=0;j<n;j++) 
    {
      if (((a[i*n+j]<0.0)&&(a[(i+1)*n+j]>0.0))||((a[i*n+j]>0.0)&&(a[(i+1)*n+j]<0.0)))
      {
        vertex[nv]=Dichotomy(u[i*n+j],u[(i+1)*n+j],a[i*n+j],a[(i+1)*n+j],d[0],epsilon);
        eax[i*n+j]=nv;
        nv++;
      }
    }
  }

  for (i=0;i<n;i++)
  {
    for (j=0;j<n-1;j++)
    {
      if (((a[i*n+j]<0.0)&&(a[i*n+(j+1)]>0.0))||((a[i*n+j]>0.0)&&(a[i*n+(j+1)]<0.0)))
      {
        vertex[nv]=Dichotomy(u[i*n+j],u[i*n+(j+1)],a[i*n+j],a[i*n+(j+1)],d[1],epsilon);
        eay[i*n+j]=nv;
        nv++;
      }
    }
  }

  // Array for edge vertices
  int e[12];

  // For all layers
  for (k=0;k<n-1;k++)
  {
    // Compute the potential field in the upper Oxy plane
    for (i=0;i<n;i++)
    {
      for (j=0;j<n;j++)
      {
        v[i*n+j]=u[i*n+j];
        v[i*n+j][2]+=d[2];
        b[i*n+j]=Intensity(v[i*n+j]);
      }
    }

    // Compute straddling edges inside lower Oxy plane
    for (i=0;i<n-1;i++)
    {
      for (j=0;j<n;j++)
      {  
        if (((b[i*n+j]<0.0)&&(b[(i+1)*n+j]>0.0))||((b[i*n+j]>0.0)&&(b[(i+1)*n+j]<0.0)))
        { 
          vertex[nv]=Dichotomy(v[i*n+j],v[(i+1)*n+j],b[i*n+j],b[(i+1)*n+j],d[0],epsilon);
          ebx[i*n+j]=nv;
          nv++;
        }
      }
    }

    for (i=0;i<n;i++)
    {
      for (j=0;j<n-1;j++)
      {
        if (((b[i*n+j]<0.0)&&(b[i*n+(j+1)]>0.0))||((b[i*n+j]>0.0)&&(b[i*n+(j+1)]<0.0)))
        {
          vertex[nv]=Dichotomy(v[i*n+j],v[i*n+(j+1)],b[i*n+j],b[i*n+(j+1)],d[1],epsilon);
          eby[i*n+j]=nv;
          nv++;
        }
      }
    }

    // Create vertical straddling edges
    for (i=0;i<n;i++)
    {
      for (j=0;j<n;j++)
      {
        if ((a[i*n+j]<0.0)&&(b[i*n+j]>0.0)||(a[i*n+j]>0.0)&&(b[i*n+j]<0.0))
        {
          vertex[nv]=Dichotomy(u[i*n+j],v[i*n+j],a[i*n+j],b[i*n+j],d[2],epsilon);
          ez[i*n+j]=nv; 
          //cout<<"Z "<<vertex[nv];//getchar();
          nv++;
        }
      }
    }

    // Create mesh
    for (i=0;i<n-1;i++)
    {
      for (j=0;j<n-1;j++)
      {
        int cubeindex=0;
        if (a[i*n+j]<0.0) cubeindex |= 1;
        if (a[(i+1)*n+j]<0.0) cubeindex |= 2;
        if (a[i*n+j+1]<0.0) cubeindex |= 4;
        if (a[(i+1)*n+j+1]<0.0) cubeindex |= 8;
        if (b[i*n+j]<0.0) cubeindex |= 16;
        if (b[(i+1)*n+j]<0.0) cubeindex |= 32;
        if (b[i*n+j+1]<0.0) cubeindex |= 64;
        if (b[(i+1)*n+j+1]<0.0) cubeindex |= 128;


        // Cube is straddling the surface
        if ((cubeindex!=255)&&(cubeindex!=0))
        {
          e[0]=eax[i*n+j];
          e[1]=eax[i*n+(j+1)];
          e[2]=ebx[i*n+j];
          e[3]=ebx[i*n+(j+1)];
          e[4]=eay[i*n+j];
          e[5]=eay[(i+1)*n+j];
          e[6]=eby[i*n+j];
          e[7]=eby[(i+1)*n+j];
          e[8]=ez[i*n+j];
          e[9]=ez[(i+1)*n+j];
          e[10]=ez[i*n+(j+1)];
          e[11]=ez[(i+1)*n+(j+1)];

          for (int h=0;triTable[cubeindex][h]!=-1;h+=3)
          {
            triangles[nt]=e[triTable[cubeindex][h]];
            nt++;
            triangles[nt]=e[triTable[cubeindex][h+1]];
            nt++;
            triangles[nt]=e[triTable[cubeindex][h+2]];
            nt++;
          }
        }
      }
    }

    // Swap planes
    swap(a,b);
    swap(u,v);
    swap(eax,ebx);
    swap(eay,eby);
  }

  delete []a;
  delete []b;
  delete []u;
  delete []v;
  delete []eax;
  delete []eay;
  delete []ebx;
  delete []eby;
  delete []ez;

  nt/=3;
}

int Blob::triTable[256][16]={
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 5, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 8, 4, 9, 8, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4,10, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0,10, 1, 8,10, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 9, 0, 1, 4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5,10, 1, 5, 9,10, 9, 8,10,-1,-1,-1,-1,-1,-1,-1},
  { 5, 1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 4, 5, 1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 9, 1,11, 0, 1, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 8, 4, 1,11, 8,11, 9, 8,-1,-1,-1,-1,-1,-1,-1},
  { 4,11, 5,10,11, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0,11, 5, 0, 8,11, 8,10,11,-1,-1,-1,-1,-1,-1,-1},
  { 4, 9, 0, 4,10, 9,10,11, 9,-1,-1,-1,-1,-1,-1,-1},
  { 9, 8,11,11, 8,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2, 6, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2, 4, 0, 6, 4, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 5, 9, 8, 2, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2, 5, 9, 2, 6, 5, 6, 4, 5,-1,-1,-1,-1,-1,-1,-1},
  { 8, 2, 6, 4,10, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {10, 2, 6,10, 1, 2, 1, 0, 2,-1,-1,-1,-1,-1,-1,-1},
  { 9, 0, 5, 8, 2, 6, 1, 4,10,-1,-1,-1,-1,-1,-1,-1},
  { 2, 6,10, 9, 2,10, 9,10, 1, 9, 1, 5,-1,-1,-1,-1},
  { 5, 1,11, 8, 2, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4, 2, 6, 4, 0, 2, 5, 1,11,-1,-1,-1,-1,-1,-1,-1},
  { 9, 1,11, 9, 0, 1, 8, 2, 6,-1,-1,-1,-1,-1,-1,-1},
  { 1,11, 9, 1, 9, 6, 1, 6, 4, 6, 9, 2,-1,-1,-1,-1},
  { 4,11, 5, 4,10,11, 6, 8, 2,-1,-1,-1,-1,-1,-1,-1},
  { 5,10,11, 5, 2,10, 5, 0, 2, 6,10, 2,-1,-1,-1,-1},
  { 2, 6, 8, 9, 0,10, 9,10,11,10, 0, 4,-1,-1,-1,-1},
  { 2, 6,10, 2,10, 9, 9,10,11,-1,-1,-1,-1,-1,-1,-1},
  { 9, 7, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 9, 7, 2, 0, 8, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 7, 2, 5, 7, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 8, 7, 2, 8, 4, 7, 4, 5, 7,-1,-1,-1,-1,-1,-1,-1},
  { 9, 7, 2, 1, 4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0,10, 1, 0, 8,10, 2, 9, 7,-1,-1,-1,-1,-1,-1,-1},
  { 0, 7, 2, 0, 5, 7, 1, 4,10,-1,-1,-1,-1,-1,-1,-1},
  { 1, 5, 7, 1, 7, 8, 1, 8,10, 2, 8, 7,-1,-1,-1,-1},
  { 5, 1,11, 9, 7, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4, 0, 8, 5, 1,11, 2, 9, 7,-1,-1,-1,-1,-1,-1,-1},
  { 7, 1,11, 7, 2, 1, 2, 0, 1,-1,-1,-1,-1,-1,-1,-1},
  { 1,11, 7, 4, 1, 7, 4, 7, 2, 4, 2, 8,-1,-1,-1,-1},
  {11, 4,10,11, 5, 4, 9, 7, 2,-1,-1,-1,-1,-1,-1,-1},
  { 2, 9, 7, 0, 8, 5, 8,11, 5, 8,10,11,-1,-1,-1,-1},
  { 7, 2, 0, 7, 0,10, 7,10,11,10, 0, 4,-1,-1,-1,-1},
  { 7, 2, 8, 7, 8,11,11, 8,10,-1,-1,-1,-1,-1,-1,-1},
  { 9, 6, 8, 7, 6, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 9, 4, 0, 9, 7, 4, 7, 6, 4,-1,-1,-1,-1,-1,-1,-1},
  { 0, 6, 8, 0, 5, 6, 5, 7, 6,-1,-1,-1,-1,-1,-1,-1},
  { 5, 7, 4, 4, 7, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 6, 9, 7, 6, 8, 9, 4,10, 1,-1,-1,-1,-1,-1,-1,-1},
  { 9, 7, 6, 9, 6, 1, 9, 1, 0, 1, 6,10,-1,-1,-1,-1},
  { 1, 4,10, 0, 5, 8, 5, 6, 8, 5, 7, 6,-1,-1,-1,-1},
  {10, 1, 5,10, 5, 6, 6, 5, 7,-1,-1,-1,-1,-1,-1,-1},
  { 9, 6, 8, 9, 7, 6,11, 5, 1,-1,-1,-1,-1,-1,-1,-1},
  {11, 5, 1, 9, 7, 0, 7, 4, 0, 7, 6, 4,-1,-1,-1,-1},
  { 8, 0, 1, 8, 1, 7, 8, 7, 6,11, 7, 1,-1,-1,-1,-1},
  { 1,11, 7, 1, 7, 4, 4, 7, 6,-1,-1,-1,-1,-1,-1,-1},
  { 9, 7, 8, 8, 7, 6,11, 5, 4,11, 4,10,-1,-1,-1,-1},
  { 7, 6, 0, 7, 0, 9, 6,10, 0, 5, 0,11,10,11, 0,-1},
  {10,11, 0,10, 0, 4,11, 7, 0, 8, 0, 6, 7, 6, 0,-1},
  {10,11, 7, 6,10, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 6, 3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4, 0, 8,10, 6, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 5, 9,10, 6, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 8, 5, 9, 8, 4, 5,10, 6, 3,-1,-1,-1,-1,-1,-1,-1},
  { 6, 1, 4, 3, 1, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 6, 0, 8, 6, 3, 0, 3, 1, 0,-1,-1,-1,-1,-1,-1,-1},
  { 1, 6, 3, 1, 4, 6, 0, 5, 9,-1,-1,-1,-1,-1,-1,-1},
  { 5, 3, 1, 5, 8, 3, 5, 9, 8, 8, 6, 3,-1,-1,-1,-1},
  {11, 5, 1, 3,10, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 1,11, 4, 0, 8, 3,10, 6,-1,-1,-1,-1,-1,-1,-1},
  { 1, 9, 0, 1,11, 9, 3,10, 6,-1,-1,-1,-1,-1,-1,-1},
  { 3,10, 6, 1,11, 4,11, 8, 4,11, 9, 8,-1,-1,-1,-1},
  {11, 6, 3,11, 5, 6, 5, 4, 6,-1,-1,-1,-1,-1,-1,-1},
  {11, 6, 3, 5, 6,11, 5, 8, 6, 5, 0, 8,-1,-1,-1,-1},
  { 0, 4, 6, 0, 6,11, 0,11, 9, 3,11, 6,-1,-1,-1,-1},
  { 6, 3,11, 6,11, 8, 8,11, 9,-1,-1,-1,-1,-1,-1,-1},
  { 3, 8, 2,10, 8, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4, 3,10, 4, 0, 3, 0, 2, 3,-1,-1,-1,-1,-1,-1,-1},
  { 8, 3,10, 8, 2, 3, 9, 0, 5,-1,-1,-1,-1,-1,-1,-1},
  { 9, 2, 3, 9, 3, 4, 9, 4, 5,10, 4, 3,-1,-1,-1,-1},
  { 8, 1, 4, 8, 2, 1, 2, 3, 1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 2, 1, 2, 3, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 9, 0, 1, 4, 2, 1, 2, 3, 2, 4, 8,-1,-1,-1,-1},
  { 5, 9, 2, 5, 2, 1, 1, 2, 3,-1,-1,-1,-1,-1,-1,-1},
  { 3, 8, 2, 3,10, 8, 1,11, 5,-1,-1,-1,-1,-1,-1,-1},
  { 5, 1,11, 4, 0,10, 0, 3,10, 0, 2, 3,-1,-1,-1,-1},
  { 2,10, 8, 2, 3,10, 0, 1, 9, 1,11, 9,-1,-1,-1,-1},
  {11, 9, 4,11, 4, 1, 9, 2, 4,10, 4, 3, 2, 3, 4,-1},
  { 8, 5, 4, 8, 3, 5, 8, 2, 3, 3,11, 5,-1,-1,-1,-1},
  {11, 5, 0,11, 0, 3, 3, 0, 2,-1,-1,-1,-1,-1,-1,-1},
  { 2, 3, 4, 2, 4, 8, 3,11, 4, 0, 4, 9,11, 9, 4,-1},
  {11, 9, 2, 3,11, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2, 9, 7, 6, 3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 4, 2, 9, 7,10, 6, 3,-1,-1,-1,-1,-1,-1,-1},
  { 7, 0, 5, 7, 2, 0, 6, 3,10,-1,-1,-1,-1,-1,-1,-1},
  {10, 6, 3, 8, 4, 2, 4, 7, 2, 4, 5, 7,-1,-1,-1,-1},
  { 6, 1, 4, 6, 3, 1, 7, 2, 9,-1,-1,-1,-1,-1,-1,-1},
  { 9, 7, 2, 0, 8, 3, 0, 3, 1, 3, 8, 6,-1,-1,-1,-1},
  { 4, 3, 1, 4, 6, 3, 5, 7, 0, 7, 2, 0,-1,-1,-1,-1},
  { 3, 1, 8, 3, 8, 6, 1, 5, 8, 2, 8, 7, 5, 7, 8,-1},
  { 9, 7, 2,11, 5, 1, 6, 3,10,-1,-1,-1,-1,-1,-1,-1},
  { 3,10, 6, 5, 1,11, 0, 8, 4, 2, 9, 7,-1,-1,-1,-1},
  { 6, 3,10, 7, 2,11, 2, 1,11, 2, 0, 1,-1,-1,-1,-1},
  { 4, 2, 8, 4, 7, 2, 4, 1, 7,11, 7, 1,10, 6, 3,-1},
  { 9, 7, 2,11, 5, 3, 5, 6, 3, 5, 4, 6,-1,-1,-1,-1},
  { 5, 3,11, 5, 6, 3, 5, 0, 6, 8, 6, 0, 9, 7, 2,-1},
  { 2, 0,11, 2,11, 7, 0, 4,11, 3,11, 6, 4, 6,11,-1},
  { 6, 3,11, 6,11, 8, 7, 2,11, 2, 8,11,-1,-1,-1,-1},
  { 3, 9, 7, 3,10, 9,10, 8, 9,-1,-1,-1,-1,-1,-1,-1},
  { 4, 3,10, 0, 3, 4, 0, 7, 3, 0, 9, 7,-1,-1,-1,-1},
  { 0,10, 8, 0, 7,10, 0, 5, 7, 7, 3,10,-1,-1,-1,-1},
  { 3,10, 4, 3, 4, 7, 7, 4, 5,-1,-1,-1,-1,-1,-1,-1},
  { 7, 8, 9, 7, 1, 8, 7, 3, 1, 4, 8, 1,-1,-1,-1,-1},
  { 9, 7, 3, 9, 3, 0, 0, 3, 1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 7, 8, 5, 8, 0, 7, 3, 8, 4, 8, 1, 3, 1, 8,-1},
  { 5, 7, 3, 1, 5, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 1,11, 9, 7,10, 9,10, 8,10, 7, 3,-1,-1,-1,-1},
  { 0,10, 4, 0, 3,10, 0, 9, 3, 7, 3, 9, 5, 1,11,-1},
  {10, 8, 7,10, 7, 3, 8, 0, 7,11, 7, 1, 0, 1, 7,-1},
  { 3,10, 4, 3, 4, 7, 1,11, 4,11, 7, 4,-1,-1,-1,-1},
  { 5, 4, 3, 5, 3,11, 4, 8, 3, 7, 3, 9, 8, 9, 3,-1},
  {11, 5, 0,11, 0, 3, 9, 7, 0, 7, 3, 0,-1,-1,-1,-1},
  { 0, 4, 8, 7, 3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {11, 7, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {11, 3, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 4, 7,11, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 9, 0, 5, 7,11, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 8, 4, 5, 9, 8, 7,11, 3,-1,-1,-1,-1,-1,-1,-1},
  { 1, 4,10,11, 3, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {10, 0, 8,10, 1, 0,11, 3, 7,-1,-1,-1,-1,-1,-1,-1},
  { 0, 5, 9, 1, 4,10, 7,11, 3,-1,-1,-1,-1,-1,-1,-1},
  { 7,11, 3, 5, 9, 1, 9,10, 1, 9, 8,10,-1,-1,-1,-1},
  { 5, 3, 7, 1, 3, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 3, 7, 5, 1, 3, 4, 0, 8,-1,-1,-1,-1,-1,-1,-1},
  { 9, 3, 7, 9, 0, 3, 0, 1, 3,-1,-1,-1,-1,-1,-1,-1},
  { 7, 9, 8, 7, 8, 1, 7, 1, 3, 4, 1, 8,-1,-1,-1,-1},
  { 3, 4,10, 3, 7, 4, 7, 5, 4,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8,10, 0,10, 7, 0, 7, 5, 7,10, 3,-1,-1,-1,-1},
  { 4,10, 3, 0, 4, 3, 0, 3, 7, 0, 7, 9,-1,-1,-1,-1},
  { 3, 7, 9, 3, 9,10,10, 9, 8,-1,-1,-1,-1,-1,-1,-1},
  { 7,11, 3, 2, 6, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2, 4, 0, 2, 6, 4, 3, 7,11,-1,-1,-1,-1,-1,-1,-1},
  { 5, 9, 0, 7,11, 3, 8, 2, 6,-1,-1,-1,-1,-1,-1,-1},
  {11, 3, 7, 5, 9, 6, 5, 6, 4, 6, 9, 2,-1,-1,-1,-1},
  { 4,10, 1, 6, 8, 2,11, 3, 7,-1,-1,-1,-1,-1,-1,-1},
  { 7,11, 3, 2, 6, 1, 2, 1, 0, 1, 6,10,-1,-1,-1,-1},
  { 0, 5, 9, 2, 6, 8, 1, 4,10, 7,11, 3,-1,-1,-1,-1},
  { 9, 1, 5, 9,10, 1, 9, 2,10, 6,10, 2, 7,11, 3,-1},
  { 3, 5, 1, 3, 7, 5, 2, 6, 8,-1,-1,-1,-1,-1,-1,-1},
  { 5, 1, 7, 7, 1, 3, 4, 0, 2, 4, 2, 6,-1,-1,-1,-1},
  { 8, 2, 6, 9, 0, 7, 0, 3, 7, 0, 1, 3,-1,-1,-1,-1},
  { 6, 4, 9, 6, 9, 2, 4, 1, 9, 7, 9, 3, 1, 3, 9,-1},
  { 8, 2, 6, 4,10, 7, 4, 7, 5, 7,10, 3,-1,-1,-1,-1},
  { 7, 5,10, 7,10, 3, 5, 0,10, 6,10, 2, 0, 2,10,-1},
  { 0, 7, 9, 0, 3, 7, 0, 4, 3,10, 3, 4, 8, 2, 6,-1},
  { 3, 7, 9, 3, 9,10, 2, 6, 9, 6,10, 9,-1,-1,-1,-1},
  {11, 2, 9, 3, 2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2,11, 3, 2, 9,11, 0, 8, 4,-1,-1,-1,-1,-1,-1,-1},
  {11, 0, 5,11, 3, 0, 3, 2, 0,-1,-1,-1,-1,-1,-1,-1},
  { 8, 4, 5, 8, 5, 3, 8, 3, 2, 3, 5,11,-1,-1,-1,-1},
  {11, 2, 9,11, 3, 2,10, 1, 4,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 1, 1, 8,10, 2, 9,11, 2,11, 3,-1,-1,-1,-1},
  { 4,10, 1, 0, 5, 3, 0, 3, 2, 3, 5,11,-1,-1,-1,-1},
  { 3, 2, 5, 3, 5,11, 2, 8, 5, 1, 5,10, 8,10, 5,-1},
  { 5, 2, 9, 5, 1, 2, 1, 3, 2,-1,-1,-1,-1,-1,-1,-1},
  { 4, 0, 8, 5, 1, 9, 1, 2, 9, 1, 3, 2,-1,-1,-1,-1},
  { 0, 1, 2, 2, 1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 8, 4, 1, 8, 1, 2, 2, 1, 3,-1,-1,-1,-1,-1,-1,-1},
  { 9, 3, 2, 9, 4, 3, 9, 5, 4,10, 3, 4,-1,-1,-1,-1},
  { 8,10, 5, 8, 5, 0,10, 3, 5, 9, 5, 2, 3, 2, 5,-1},
  { 4,10, 3, 4, 3, 0, 0, 3, 2,-1,-1,-1,-1,-1,-1,-1},
  { 3, 2, 8,10, 3, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 6,11, 3, 6, 8,11, 8, 9,11,-1,-1,-1,-1,-1,-1,-1},
  { 0, 6, 4, 0,11, 6, 0, 9,11, 3, 6,11,-1,-1,-1,-1},
  {11, 3, 6, 5,11, 6, 5, 6, 8, 5, 8, 0,-1,-1,-1,-1},
  {11, 3, 6,11, 6, 5, 5, 6, 4,-1,-1,-1,-1,-1,-1,-1},
  { 1, 4,10,11, 3, 8,11, 8, 9, 8, 3, 6,-1,-1,-1,-1},
  { 1, 0, 6, 1, 6,10, 0, 9, 6, 3, 6,11, 9,11, 6,-1},
  { 5, 8, 0, 5, 6, 8, 5,11, 6, 3, 6,11, 1, 4,10,-1},
  {10, 1, 5,10, 5, 6,11, 3, 5, 3, 6, 5,-1,-1,-1,-1},
  { 5, 1, 3, 5, 3, 8, 5, 8, 9, 8, 3, 6,-1,-1,-1,-1},
  { 1, 3, 9, 1, 9, 5, 3, 6, 9, 0, 9, 4, 6, 4, 9,-1},
  { 6, 8, 0, 6, 0, 3, 3, 0, 1,-1,-1,-1,-1,-1,-1,-1},
  { 6, 4, 1, 3, 6, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 8, 9, 3, 8, 3, 6, 9, 5, 3,10, 3, 4, 5, 4, 3,-1},
  { 0, 9, 5,10, 3, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 6, 8, 0, 6, 0, 3, 4,10, 0,10, 3, 0,-1,-1,-1,-1},
  { 6,10, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {10, 7,11, 6, 7,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {10, 7,11,10, 6, 7, 8, 4, 0,-1,-1,-1,-1,-1,-1,-1},
  { 7,10, 6, 7,11,10, 5, 9, 0,-1,-1,-1,-1,-1,-1,-1},
  {11, 6, 7,11,10, 6, 9, 8, 5, 8, 4, 5,-1,-1,-1,-1},
  { 1, 7,11, 1, 4, 7, 4, 6, 7,-1,-1,-1,-1,-1,-1,-1},
  { 8, 1, 0, 8, 7, 1, 8, 6, 7,11, 1, 7,-1,-1,-1,-1},
  { 9, 0, 5, 7,11, 4, 7, 4, 6, 4,11, 1,-1,-1,-1,-1},
  { 9, 8, 1, 9, 1, 5, 8, 6, 1,11, 1, 7, 6, 7, 1,-1},
  {10, 5, 1,10, 6, 5, 6, 7, 5,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 4, 5, 1, 6, 5, 6, 7, 6, 1,10,-1,-1,-1,-1},
  { 9, 6, 7, 9, 1, 6, 9, 0, 1, 1,10, 6,-1,-1,-1,-1},
  { 6, 7, 1, 6, 1,10, 7, 9, 1, 4, 1, 8, 9, 8, 1,-1},
  { 5, 4, 7, 4, 6, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 6, 0, 6, 5, 5, 6, 7,-1,-1,-1,-1,-1,-1,-1},
  { 9, 0, 4, 9, 4, 7, 7, 4, 6,-1,-1,-1,-1,-1,-1,-1},
  { 9, 8, 6, 7, 9, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 7, 8, 2, 7,11, 8,11,10, 8,-1,-1,-1,-1,-1,-1,-1},
  { 7, 0, 2, 7,10, 0, 7,11,10,10, 4, 0,-1,-1,-1,-1},
  { 0, 5, 9, 8, 2,11, 8,11,10,11, 2, 7,-1,-1,-1,-1},
  {11,10, 2,11, 2, 7,10, 4, 2, 9, 2, 5, 4, 5, 2,-1},
  { 1, 7,11, 4, 7, 1, 4, 2, 7, 4, 8, 2,-1,-1,-1,-1},
  { 7,11, 1, 7, 1, 2, 2, 1, 0,-1,-1,-1,-1,-1,-1,-1},
  { 4,11, 1, 4, 7,11, 4, 8, 7, 2, 7, 8, 0, 5, 9,-1},
  { 7,11, 1, 7, 1, 2, 5, 9, 1, 9, 2, 1,-1,-1,-1,-1},
  { 1, 7, 5, 1, 8, 7, 1,10, 8, 2, 7, 8,-1,-1,-1,-1},
  { 0, 2,10, 0,10, 4, 2, 7,10, 1,10, 5, 7, 5,10,-1},
  { 0, 1, 7, 0, 7, 9, 1,10, 7, 2, 7, 8,10, 8, 7,-1},
  { 9, 2, 7, 1,10, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 8, 2, 7, 8, 7, 4, 4, 7, 5,-1,-1,-1,-1,-1,-1,-1},
  { 0, 2, 7, 5, 0, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 8, 2, 7, 8, 7, 4, 9, 0, 7, 0, 4, 7,-1,-1,-1,-1},
  { 9, 2, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2,10, 6, 2, 9,10, 9,11,10,-1,-1,-1,-1,-1,-1,-1},
  { 0, 8, 4, 2, 9, 6, 9,10, 6, 9,11,10,-1,-1,-1,-1},
  { 5,11,10, 5,10, 2, 5, 2, 0, 6, 2,10,-1,-1,-1,-1},
  { 4, 5, 2, 4, 2, 8, 5,11, 2, 6, 2,10,11,10, 2,-1},
  { 1, 9,11, 1, 6, 9, 1, 4, 6, 6, 2, 9,-1,-1,-1,-1},
  { 9,11, 6, 9, 6, 2,11, 1, 6, 8, 6, 0, 1, 0, 6,-1},
  { 4, 6,11, 4,11, 1, 6, 2,11, 5,11, 0, 2, 0,11,-1},
  { 5,11, 1, 8, 6, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2,10, 6, 9,10, 2, 9, 1,10, 9, 5, 1,-1,-1,-1,-1},
  { 9, 6, 2, 9,10, 6, 9, 5,10, 1,10, 5, 0, 8, 4,-1},
  {10, 6, 2,10, 2, 1, 1, 2, 0,-1,-1,-1,-1,-1,-1,-1},
  {10, 6, 2,10, 2, 1, 8, 4, 2, 4, 1, 2,-1,-1,-1,-1},
  { 2, 9, 5, 2, 5, 6, 6, 5, 4,-1,-1,-1,-1,-1,-1,-1},
  { 2, 9, 5, 2, 5, 6, 0, 8, 5, 8, 6, 5,-1,-1,-1,-1},
  { 2, 0, 4, 6, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 2, 8, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 9,11, 8,11,10, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4, 0, 9, 4, 9,10,10, 9,11,-1,-1,-1,-1,-1,-1,-1},
  { 0, 5,11, 0,11, 8, 8,11,10,-1,-1,-1,-1,-1,-1,-1},
  { 4, 5,11,10, 4,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 4, 8, 1, 8,11,11, 8, 9,-1,-1,-1,-1,-1,-1,-1},
  { 9,11, 1, 0, 9, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 4, 8, 1, 8,11, 0, 5, 8, 5,11, 8,-1,-1,-1,-1},
  { 5,11, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 1,10, 5,10, 9, 9,10, 8,-1,-1,-1,-1,-1,-1,-1},
  { 4, 0, 9, 4, 9,10, 5, 1, 9, 1,10, 9,-1,-1,-1,-1},
  { 0, 1,10, 8, 0,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 4, 1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 5, 4, 8, 9, 5, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 9, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 0, 4, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}};

